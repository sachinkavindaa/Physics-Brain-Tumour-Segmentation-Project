# -*- coding: utf-8 -*-
"""Plot Epoch 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YW-BoErLKrVHo0Not4y2e0iSzw3-6-mT
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import zipfile
import cv2
from skimage import io
import tensorflow as tf
from tensorflow.python.keras import Sequential
from tensorflow.keras import layers, optimizers
from tensorflow.keras.applications import DenseNet121
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.layers import *
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.initializers import glorot_uniform
from tensorflow.keras.utils import plot_model
from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, LearningRateScheduler
from IPython.display import display
from tensorflow.keras import backend as K
from sklearn.preprocessing import StandardScaler, normalize
import os
import glob
import random
from google.colab import files #library to upload files to colab notebook
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Physics_Project/Brain/Healthcare AI Datasets/Brain_MRI

brain_df = pd.read_csv('data_mask.csv')

brain_df['mask'].value_counts().index

brain_df.mask_path

brain_df.image_path

brain_df.mask_path[1]
brain_df.image_path[1]

brain_df_train = brain_df.drop(columns = ['patient_id'])
brain_df_train.shape

brain_df_train['mask'] = brain_df_train['mask'].apply(lambda x : str(x))

from sklearn.model_selection import train_test_split

train, test = train_test_split(brain_df_train,test_size =0.2)

from keras_preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(rescale=1./225., validation_split=0.2)

train_generator=datagen.flow_from_dataframe(
dataframe = train,
directory='./', x_col='image_path', 
y_col='mask', 
target_size=(256, 256), 
class_mode='categorical', 
batch_size=32, 
shuffle=True,  
subset='training'
)

valid_generator=datagen.flow_from_dataframe(
dataframe = train,
directory='./', 
x_col='image_path', 
y_col='mask', 
target_size=(256, 256), 
class_mode='categorical', 
batch_size=32, 
shuffle=True,  
subset='validation'
)


test_datagen = ImageDataGenerator(rescale=1./225., validation_split=0.2)

test_generator=datagen.flow_from_dataframe(
dataframe = test,
directory='./', 
x_col='image_path', 
y_col='mask', 
target_size=(256, 256), 
class_mode='categorical', 
batch_size=32, 
shuffle=True,  
)

basemodel = ResNet50(weights='imagenet', include_top= False, input_tensor= Input(shape=(256,256,3)))

for layer in basemodel.layers:
  layers.trainable = False

headmodel = basemodel.output
headmodel = AveragePooling2D(pool_size = (4,4))(headmodel)
headmodel = Flatten(name= 'flatten')(headmodel)
headmodel = Dense(256, activation = "relu")(headmodel)
headmodel = Dropout(0.3)(headmodel)
headmodel = Dense(256, activation = "relu")(headmodel)
headmodel = Dropout(0.3)(headmodel)
#headmodel = Dense(256, activation = "relu")(headmodel)
#headmodel = Dropout(0.3)(headmodel)
headmodel = Dense(2, activation = 'softmax')(headmodel)

model = Model(inputs = basemodel.input, outputs = headmodel)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

earlystopping = EarlyStopping(monitor='val_loss', patience=20, verbose=1, mode='min')

checkpointer = ModelCheckpoint(filepath="classifier-resnet-weights.hdf5", verbose=1, save_best_only=True)

history = model.fit(train_generator,  epochs = 5, validation_data= valid_generator, callbacks=[checkpointer, earlystopping])

_, train_acc = model.evaluate(train_generator,  verbose=0)
_, test_acc = model.evaluate(test_generator, verbose=0)

plt.figure(figsize=(8,5))
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.plot(history.history['loss'],'r', label='train')
plt.plot(history.history['val_loss'],'b',label='val')
plt.legend()
plt.show()

plt.figure(figsize=(8,5))
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.plot(history.history['accuracy'], 'r' , label='train')
plt.plot(history.history['val_accuracy'], 'b', label='val')
plt.legend()
plt.show()

model_json = model.to_json()
with open("classifier-resnet-model.json","w") as json_file:
  json_file.write(model_json)

with open('resnet-50-MRI.json', 'r') as json_file:
    json_savedModel= json_file.read()
# load the model  
model = tf.keras.models.model_from_json(json_savedModel)
model.load_weights('weights.hdf5')
model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics= ["accuracy"])

test_predict = model.predict(test_generator, steps = test_generator.n // 16, verbose =1)

print('Train: %.3f, Test: %.3f' % (train_acc, test_acc))